Figura Ate;
Figura Mariana;
Figura lol;
Figura turu;
Figura pin;
Figura jass;
Figura yey;
Figura sell;

void setup()
{
  size (800, 600);
  // background (#6A3CC1);

  Ate = new Triangulo(500, 500, 500, 500, 500);
  Mariana =  new Cuadrado(500);
  lol = new Circulo (100);
  turu = new Rectangulo (500, 300);
  pin = new Pentagono (500, 300);
  jass = new Hexagono (500, 300);
  yey = new Heptagono (500, 300);
  sell = new Octagono (500, 300);
}

void draw()

{
  background (#6A3CC1);
  println(Ate.perimetro() + "," + Ate.area() );
  println(Mariana.perimetro() + "," + Mariana.area() );
  println(lol.perimetro() + "," + lol.area() );
  println(turu.perimetro() + "," + turu.area() );
  println(pin.perimetro() + "," + pin.area() );
  println(jass.perimetro() + "," + jass.area() );
  println(yey.perimetro() + "," + yey.area() );
  println(sell.perimetro() + "," + sell.area() );



  pushMatrix();
  translate(100, 100);
  rotate(frameCount / 200.0);
  polygon(10, 10, 82, 3);  // Triangulo
  popMatrix();
  
   pushMatrix();
  translate(400, 50);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 4);  // cuadrado
  popMatrix();
  
   pushMatrix();
  translate(400, 50);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 4);  // 
  popMatrix();
  
   pushMatrix();
  translate(700, 50);
  rotate(frameCount / 200.0);
  ellipse(50, 50, 100, 100);  // 
  popMatrix();
  
     pushMatrix();
  translate(100, 400);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 5);  // 
  popMatrix();
  
    pushMatrix();
  translate(400, 400);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 6);  // 
  popMatrix();
  
    pushMatrix();
  translate(700, 400);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 7);  // 
  popMatrix();
  
    pushMatrix();
  translate(250, 250);
  rotate(frameCount / 200.0);
  polygon(50, 50, 82, 8);  // 
  popMatrix();

}

void polygon(float x, float y, float radius, int npoints) {
  float angle = TWO_PI / npoints;
  beginShape();
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius;
    float sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

interface Figura
{
  float perimetro();
  float area();
}

class Triangulo implements Figura
{
  float b, h, l1, l2, l3;

  Triangulo(float b_, float h_, float l1_, float l2_, float l3_)
  {
    b = b_;
    h = h_;
    l1 = l1_;
    l2 = l2_;
    l3 = l3_;
  }
  float perimetro()
  {
    return l1 + l2 + l3;
  }
  float area()
  {
    return (b*h)/2;
  }
 
}

class Cuadrado implements Figura
{
  float l;

  Cuadrado(float l_)
  {
    l = l_;
  }
  float perimetro()
  {
    return l*4;
  }

  float area()
  {
    return l*2;
  }
}
class Circulo implements Figura
{
  float r;

  Circulo(float r_)
  {
    r = r_;
  }
  float perimetro()
  {
    return 2*PI*r;
  }
  float area()
  {
    return PI*r*r;
  }
}
class Rectangulo implements Figura
{
  float b, h;

  Rectangulo (float b_, float h_)
  {
    b = b_;
    h = h_;
  }
  float perimetro()
  {
    return 2*b+h;
  }
  float area()
  {
    return b*h;
  }
}

class Pentagono implements Figura
{
  float l, aptm;

  Pentagono (float l_, float aptm_)
  {
    l = l_;
    aptm = aptm_;
  }
  float perimetro ()
  {
    return l*5;
  }
  float area ()
  { 
    return 5*l*aptm/2;
  }
  void display()
  {
    polygon(10, 10, 82, 5);
  }
}

class Hexagono implements Figura
{
  float l, aptm;

  Hexagono (float l_, float aptm_)
  {
    l = l_;
    aptm = aptm_;
  }
  float perimetro ()
  {
    return l*6;
  }
  float area ()
  { 
    return 6*l*aptm/2;
  }
}

class Heptagono implements Figura
{
  float l, aptm;

  Heptagono (float l_, float aptm_)
  {
    l = l_;
    aptm = aptm_;
  }
  float perimetro ()
  {
    return l*7;
  }
  float area ()
  { 
    return 7*l*aptm/2;
  }
}

class Octagono implements Figura
{
  float l, aptm;

  Octagono (float l_, float aptm_)
  {
    l = l_;
    aptm = aptm_;
  }
  float perimetro ()
  {
    return l*8;
  }
  float area ()
  { 
    return 8*l*aptm/2;
  }
}
